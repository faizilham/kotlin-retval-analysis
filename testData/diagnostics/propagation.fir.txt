FILE: propagation.kt
    package foo.baz

    public final fun normal(): R|kotlin/Int| {
        ^normal Int(1)
    }
    @R|com/faizilham/kotlin/retval/Discardable|() public final fun ignored(): R|kotlin/Int| {
        ^ignored Int(1)
    }
    public final fun ignored2(): R|@MayUse kotlin/Int| {
        ^ignored2 Int(1)
    }
    public final fun fromIgnored1(): R|kotlin/Int| {
        ^fromIgnored1 R|foo/baz/ignored2|()
    }
    public final fun fromIgnored2(): R|@AnyUse kotlin/Int| {
        ^fromIgnored2 R|foo/baz/ignored2|()
    }
    public final inline fun <@R|com/faizilham/kotlin/retval/AnyUse|() R> myRun(block: R|() -> R|): R|R| {
        ^myRun R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|R|>|()
    }
    public final inline fun <R> myRun1(block: R|() -> @AnyUse R|): R|@AnyUse R| {
        ^myRun1 R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|@AnyUse R|>|()
    }
    public final fun test(): R|kotlin/Unit| {
        R|kotlin/run|<R|kotlin/Int|>(<L> = run@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|foo/baz/normal|()
        }
        )
        R|kotlin/run|<R|kotlin/Int|>(<L> = run@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ Int(1).R|kotlin/Int.plus|(Int(2))
        }
        )
        R|kotlin/run|<R|kotlin/Unit|>(<L> = run@fun <anonymous>(): R|kotlin/Unit| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|kotlin/io/print|(R|foo/baz/normal|())
        }
        )
        R|kotlin/run|<R|kotlin/Unit|>(<L> = run@fun <anonymous>(): R|kotlin/Unit| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|foo/baz/normal|()
            R|foo/baz/ignored|()
            R|kotlin/io/print|(R|foo/baz/normal|())
        }
        )
        R|foo/baz/ignored2|()
        R|foo/baz/myRun|<R|kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=UNKNOWN>  {
            ^ R|foo/baz/normal|()
        }
        )
        R|foo/baz/myRun|<R|@MayUse kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|@MayUse kotlin/Int| <inline=Inline, kind=UNKNOWN>  {
            ^ R|foo/baz/ignored2|()
        }
        )
        R|foo/baz/myRun|<R|kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=UNKNOWN>  {
            ^ R|foo/baz/myRun|<R|kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=UNKNOWN>  {
                ^ R|foo/baz/normal|()
            }
            )
        }
        )
        R|foo/baz/myRun1|<R|kotlin/Int|>(<L> = myRun1@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=UNKNOWN>  {
            ^ R|foo/baz/normal|()
        }
        )
        R|foo/baz/myRun1|<R|@MayUse kotlin/Int|>(<L> = myRun1@fun <anonymous>(): R|@MayUse kotlin/Int| <inline=Inline, kind=UNKNOWN>  {
            ^ R|foo/baz/ignored2|()
        }
        )
        R|foo/baz/fromIgnored1|()
    }
