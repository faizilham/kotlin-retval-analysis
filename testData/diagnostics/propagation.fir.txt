FILE: propagation.kt
    package foo.baz

    public final fun normal(): R|kotlin/Int| {
        ^normal Int(1)
    }
    @R|com/faizilham/kotlin/retval/Discardable|() public final fun ignored(): R|kotlin/Int| {
        ^ignored Int(1)
    }
    public final fun ignored2(): R|@MayUse kotlin/Int| {
        ^ignored2 Int(1)
    }
    public final fun fromIgnored1(): R|kotlin/Int| {
        ^fromIgnored1 R|foo/baz/ignored2|()
    }
    public final fun fromIgnored2(): R|@AnyUse kotlin/Int| {
        ^fromIgnored2 R|foo/baz/ignored2|()
    }
    @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final inline fun <@R|com/faizilham/kotlin/retval/AnyUse|() R> myRun(block: R|() -> R|): R|R|
        [R|Contract description]
         <
            CallsInPlace(block, EXACTLY_ONCE)
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.callsInPlace|<R|R|>(R|<local>/block|, Q|kotlin/contracts/InvocationKind|.R|kotlin/contracts/InvocationKind.EXACTLY_ONCE|)
            }
            )
        }

        ^myRun R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|R|>|()
    }
    @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final inline fun <R> myRun1(block: R|() -> @AnyUse R|): R|@AnyUse R|
        [R|Contract description]
         <
            CallsInPlace(block, EXACTLY_ONCE)
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.callsInPlace|<R|@AnyUse R|>(R|<local>/block|, Q|kotlin/contracts/InvocationKind|.R|kotlin/contracts/InvocationKind.EXACTLY_ONCE|)
            }
            )
        }

        ^myRun1 R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|@AnyUse R|>|()
    }
    public final fun test(): R|kotlin/Unit| {
        R|kotlin/run|<R|kotlin/Int|>(<L> = run@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|foo/baz/normal|()
        }
        )
        R|kotlin/run|<R|kotlin/Int|>(<L> = run@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ Int(1).R|kotlin/Int.plus|(Int(2))
        }
        )
        R|kotlin/run|<R|kotlin/Unit|>(<L> = run@fun <anonymous>(): R|kotlin/Unit| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|kotlin/io/print|(R|foo/baz/normal|())
        }
        )
        R|kotlin/run|<R|kotlin/Unit|>(<L> = run@fun <anonymous>(): R|kotlin/Unit| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|foo/baz/normal|()
            R|foo/baz/ignored|()
            R|kotlin/io/print|(R|foo/baz/normal|())
        }
        )
        R|foo/baz/ignored2|()
        R|foo/baz/myRun|<R|kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|foo/baz/normal|()
        }
        )
        R|foo/baz/myRun|<R|@MayUse kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|@MayUse kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|foo/baz/ignored2|()
        }
        )
        R|foo/baz/myRun|<R|kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|foo/baz/myRun|<R|kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
                ^ R|foo/baz/normal|()
            }
            )
        }
        )
        R|foo/baz/myRun1|<R|kotlin/Int|>(<L> = myRun1@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|foo/baz/normal|()
        }
        )
        R|foo/baz/myRun1|<R|@MayUse kotlin/Int|>(<L> = myRun1@fun <anonymous>(): R|@MayUse kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|foo/baz/ignored2|()
        }
        )
        R|foo/baz/fromIgnored1|()
        lval c: R|kotlin/Boolean| = Boolean(true)
        R|foo/baz/myRun|<R|@MayUse kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|@MayUse kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ when () {
                R|<local>/c| ->  {
                    R|foo/baz/ignored2|()
                }
                else ->  {
                    R|foo/baz/ignored2|()
                }
            }

        }
        )
        R|foo/baz/myRun|<R|kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ when () {
                R|<local>/c| ->  {
                    R|foo/baz/normal|()
                }
                else ->  {
                    R|foo/baz/ignored2|()
                }
            }

        }
        )
        lval a1: R|kotlin/Int| = R|foo/baz/myRun|<R|kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ when () {
                R|<local>/c| ->  {
                    R|foo/baz/normal|()
                }
                else ->  {
                    R|foo/baz/ignored2|()
                }
            }

        }
        )
        lval x: R|kotlin/Int| = R|foo/baz/myRun|<R|kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|foo/baz/normal|()
        }
        )
        R|foo/baz/myRun|<R|kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|foo/baz/ignored2|().R|kotlin/Int.plus|(R|foo/baz/ignored2|())
        }
        )
        lval y: R|@MayUse kotlin/Int| = Int(3)
        R|foo/baz/myRun|<R|@MayUse kotlin/Int|>(<L> = myRun@fun <anonymous>(): R|@MayUse kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|<local>/y|
        }
        )
    }
